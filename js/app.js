// Generated by CoffeeScript 1.12.7
(function() {
  var add_role, class_cur_letter, cy, elements, randomize, reshape, reshape2, sparql_text, update_sparql_text;

  update_sparql_text = function() {
    var child, j, k, len, len1, parent, ref, ref1, sparql_string;
    sparql_string = "Select * <br> where { <br>";
    ref = cy.nodes(".node-variable");
    for (j = 0, len = ref.length; j < len; j++) {
      parent = ref[j];
      console.log("hey");
      ref1 = parent.neighborhood("node");
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        child = ref1[k];
        sparql_string += "&emsp;$" + parent.id() + " " + child.id() + "<br>";
      }
    }
    return sparql_text.innerHTML = sparql_string + "}";
  };

  sparql_text = document.getElementById("sparql_text");

  class_cur_letter = "a";

  elements = {
    nodes: [
      {
        data: {
          id: 'a'
        },
        classes: 'node-variable'
      }
    ]
  };

  cy = new cytoscape({
    container: document.getElementById('cy'),
    elements: elements,
    layout: {
      name: 'cose'
    },
    style: new cytoscape.stylesheet().selector('node').style({
      'background-color': 'black',
      'shape': 'rectangle',
      'content': 'data(id)'
    }).selector('.node-domain').style({
      'background-color': 'white',
      'border-color': 'black',
      'border-style': 'solid',
      'border-width': '2px'
    }).selector('.node-range').style({
      'background-color': 'black',
      'border-color': 'white',
      'border-style': 'solid',
      'border-width': '2px'
    }).selector('.node-attribute').style({
      'shape': 'ellipse',
      'background-color': 'white',
      'border-style': 'solid',
      'border-color': 'black',
      'border-width': '2px'
    }).selector('.node-variable').style({
      'shape': 'ellipse',
      'background-color': 'gray',
      'width': '500',
      'height': '500',
      'text-valign': 'center',
      'font-size': '60',
      'color': 'white',
      'text-outline-color': 'black',
      'text-outline-width': '2px'
    }).selector(':parent').style({
      'background-image': 'resources/background-circle.svg',
      'background-opacity': '0',
      'background-width': '100%',
      'background-height': '100%',
      'shape': 'rectangle',
      'border-color': 'white'
    })
  });

  reshape2 = function() {
    var child, j, len, neighbor, neighbor2, par_name, parent, parents, results;
    parents = cy.nodes().parents();
    parents.layout({
      name: 'circle'
    }).run();
    results = [];
    for (j = 0, len = parents.length; j < len; j++) {
      parent = parents[j];
      parent.children().layout({
        name: 'circle'
      }).run();
      results.push((function() {
        var k, len1, ref, results1;
        ref = parent.children();
        results1 = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          child = ref[k];
          results1.push((function() {
            var l, len2, ref1, results2;
            ref1 = child.neighborhood('node');
            results2 = [];
            for (l = 0, len2 = ref1.length; l < len2; l++) {
              neighbor = ref1[l];
              neighbor.position('x', child.position('x') + (child.position('x') - parent.position('x')));
              neighbor.position('y', child.position('y') + (child.position('y') - parent.position('y')));
              results2.push((function() {
                var len3, m, ref2, results3;
                ref2 = neighbor.neighborhood('node');
                results3 = [];
                for (m = 0, len3 = ref2.length; m < len3; m++) {
                  neighbor2 = ref2[m];
                  if (neighbor2 !== child) {
                    neighbor2.position('x', neighbor.position('x') + (neighbor.position('x') - child.position('x')));
                    neighbor2.position('y', neighbor.position('y') + (neighbor.position('y') - child.position('y')));
                    if (neighbor2.isOrphan()) {
                      console.log(neighbor2.id());
                      results3.push(par_name = neighbor2.id() + 'p');
                    } else {
                      results3.push(void 0);
                    }
                  } else {
                    results3.push(void 0);
                  }
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  };

  reshape = function() {
    var child, j, len, neighbor, neighbor2, new_var, parent, parents, results;
    parents = cy.nodes('.node-variable');
    results = [];
    for (j = 0, len = parents.length; j < len; j++) {
      parent = parents[j];
      parent.neighborhood().layout({
        name: 'circle',
        boundingBox: {
          x1: parent.position('x') - parent.width() / 2,
          y1: parent.position('x') - parent.height() / 2,
          w: parent.width(),
          h: parent.height()
        }
      }).run();
      results.push((function() {
        var k, len1, ref, results1;
        ref = parent.neighborhood('.node-range');
        results1 = [];
        for (k = 0, len1 = ref.length; k < len1; k++) {
          child = ref[k];
          results1.push((function() {
            var l, len2, ref1, results2;
            ref1 = child.neighborhood('.node-attribute');
            results2 = [];
            for (l = 0, len2 = ref1.length; l < len2; l++) {
              neighbor = ref1[l];
              console.log(neighbor.id());
              neighbor.position('x', child.position('x') + (child.position('x') - parent.position('x')));
              neighbor.position('y', child.position('y') + (child.position('y') - parent.position('y')));
              results2.push((function() {
                var len3, m, ref2, results3;
                ref2 = neighbor.neighborhood('.node-domain');
                results3 = [];
                for (m = 0, len3 = ref2.length; m < len3; m++) {
                  neighbor2 = ref2[m];
                  if (neighbor2 !== child) {
                    neighbor2.position('x', neighbor.position('x') + (neighbor.position('x') - child.position('x')));
                    neighbor2.position('y', neighbor.position('y') + (neighbor.position('y') - child.position('y')));
                    results3.push((function() {
                      var len4, n, ref3, results4;
                      ref3 = neighbor2.neighborhood('.node-variable');
                      results4 = [];
                      for (n = 0, len4 = ref3.length; n < len4; n++) {
                        new_var = ref3[n];
                        if (new_var !== neighbor) {
                          new_var.position('x', neighbor2.position('x') + (neighbor2.position('x') - neighbor.position('x')));
                          results4.push(new_var.position('y', neighbor2.position('y') + (neighbor2.position('y') - neighbor.position('y'))));
                        } else {
                          results4.push(void 0);
                        }
                      }
                      return results4;
                    })());
                  } else {
                    results3.push(void 0);
                  }
                }
                return results3;
              })());
            }
            return results2;
          })());
        }
        return results1;
      })());
    }
    return results;
  };

  randomize = function(parent_name) {
    var i, j, new_node_attribute_id, new_node_domain_id, new_node_new_parent_id, new_node_range_id, range, ref, results;
    range = Math.round(Math.random() * (10 - 4) + 4);
    console.log("number of generated nodes: " + range);
    results = [];
    for (i = j = 0, ref = range - 1; j < ref; i = j += 1) {
      new_node_range_id = parent_name + Math.round(Math.random() * 10000) + "r";
      new_node_domain_id = parent_name + Math.round(Math.random() * 10000) + "d";
      new_node_attribute_id = parent_name + Math.round(Math.random() * 10000) + "a";
      new_node_new_parent_id = parent_name + i;
      cy.add({
        group: 'nodes',
        data: {
          id: new_node_range_id,
          parent: parent_name
        },
        classes: 'node-range'
      });
      cy.add({
        group: 'nodes',
        data: {
          id: new_node_attribute_id
        },
        classes: 'node-attribute'
      });
      cy.add({
        group: 'nodes',
        data: {
          id: new_node_domain_id,
          parent: new_node_new_parent_id
        },
        classes: 'node-domain'
      });
      cy.add({
        group: 'edges',
        data: {
          source: new_node_range_id,
          target: new_node_attribute_id
        }
      });
      cy.add({
        group: 'edges',
        data: {
          source: new_node_attribute_id,
          target: new_node_domain_id
        }
      });
      results.push(reshape());
    }
    return results;
  };

  add_role = function(parent) {
    var attr_id, dom_id, range_id, var_id;
    range_id = parent.id() + Math.round(Math.random() * 1000);
    attr_id = parent.id() + range_id + "a";
    dom_id = parent.id() + range_id + "d";
    var_id = parent.id() + range_id + "p";
    cy.add({
      group: 'nodes',
      data: {
        id: range_id
      }
    });
    cy.add({
      group: 'edges',
      data: {
        source: parent.id(),
        target: range_id
      }
    });
    cy.add({
      group: 'nodes',
      data: {
        id: attr_id
      },
      classes: 'node-attribute'
    });
    cy.add({
      group: 'edges',
      data: {
        source: range_id,
        target: attr_id
      }
    });
    cy.add({
      group: 'nodes',
      data: {
        id: dom_id
      },
      classes: 'node-domain'
    });
    cy.add({
      group: 'edges',
      data: {
        source: attr_id,
        target: dom_id
      }
    });
    reshape();
    class_cur_letter += 1;
    cy.add({
      group: 'nodes',
      data: {
        id: class_cur_letter
      },
      classes: 'node-variable'
    });
    return cy.add({
      group: 'edges',
      data: {
        source: dom_id,
        target: class_cur_letter
      }
    });
  };

  cy.on('click', '.node-variable', function($) {
    if (this.isOrphan()) {
      add_role(this);
      return reshape();
    }
  });

  cy.on('mousemove', function($) {
    return update_sparql_text();
  });

  reshape();

}).call(this);
