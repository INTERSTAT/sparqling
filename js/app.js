// Generated by CoffeeScript 1.12.7
(function() {
  var generate_style,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  generate_style = function() {
    return new cytoscape.stylesheet().selector('node').style({
      'background-color': 'black',
      'shape': 'rectangle'
    }).selector('.node-domain').style({
      'background-color': 'black',
      'border-color': 'black',
      'border-style': 'solid',
      'border-width': '2px'
    }).selector('.node-range').style({
      'background-color': 'white',
      'border-color': 'black',
      'border-style': 'solid',
      'border-width': '2px'
    }).selector('.node-attribute').style({
      'shape': 'ellipse',
      'background-color': 'white',
      'border-style': 'solid',
      'border-color': 'black',
      'border-width': '2px',
      'content': 'data(id)'
    }).selector('.node-variable').style({
      'shape': 'ellipse',
      'background-color': 'gray',
      'width': function(ele) {
        return 50 + (ele.neighborhood('edge').length * 50);
      },
      'height': function(ele) {
        return 50 + (ele.neighborhood('edge').length * 50);
      },
      'text-valign': 'center',
      'font-size': '60',
      'color': 'white',
      'text-outline-color': 'black',
      'text-outline-width': '2px',
      'content': 'data(id)'
    }).selector('node.highlight').style({
      'border-color': '#333',
      'border-opacity': '0.5',
      'border-width': '20px',
      'border-style': 'solid'
    }).selector('node:selected').style({
      'border-color': '#daa',
      'border-opacity': '0.5',
      'border-width': '20px',
      'border-style': 'solid'
    }).selector(':parent').style({
      'background-image': 'resources/background-circle.svg',
      'background-opacity': '0',
      'background-width': '100%',
      'background-height': '100%',
      'shape': 'rectangle',
      'border-color': 'white'
    });
  };

  window.PainlessGraph = (function() {
    function PainlessGraph(canvas) {
      this.init = bind(this.init, this);
      this.add_role = bind(this.add_role, this);
      this.update_sparql_text = bind(this.update_sparql_text, this);
      this.reshape = bind(this.reshape, this);
      this.canvas = canvas;
      this.cur_char_code = 66;
      this.init();
      this.reshape();
      this.update_sparql_text();
    }

    PainlessGraph.prototype.reshape = function() {
      console.log("reshaping");
      return this.cy.nodes().layout({
        name: 'circle'
      }).run();
    };

    PainlessGraph.prototype.create_highlighting_box = function(node) {

      /** creates a box in the sparql text that helps locate in the graph where the node is */
      var st;
      st = document.createElement('div');
      st.className = "highlighting_box";
      st.onmouseover = function($) {
        console.log("highlighted: " + node.id());
        return node.addClass("highlight");
      };
      st.onclick = function($) {
        return select_node(node);
      };
      st.onmouseout = function($) {
        console.log("removed highlighting: " + node.id());
        return node.removeClass("highlight");
      };
      st.innerHTML = node.id();
      return st;
    };

    PainlessGraph.prototype.update_sparql_text = function() {
      var f, f_string, i, init_string, j, k, l, len, len1, len2, len3, len4, m, node1, node2, node3, node4, node5, q_line, ref, ref1, ref2, ref3, ref4, sparql_text;
      console.log("updating query");
      sparql_text = document.getElementById("sparql_textbox");
      sparql_text.innerHTML = "";
      init_string = document.createElement('div');
      init_string.innerHTML = "Select * <br> where { <br>";
      sparql_text.append(init_string);
      q_line = document.createElement('div');
      q_line.className = "q_line";
      ref = this.cy.nodes(".node-variable");
      for (i = 0, len = ref.length; i < len; i++) {
        node1 = ref[i];
        ref1 = node1.neighborhood(".node-domain");
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          node2 = ref1[j];
          ref2 = node2.neighborhood(".node-attribute");
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            node3 = ref2[k];
            ref3 = node3.neighborhood(".node-range");
            for (l = 0, len3 = ref3.length; l < len3; l++) {
              node4 = ref3[l];
              ref4 = node4.neighborhood(".node-variable");
              for (m = 0, len4 = ref4.length; m < len4; m++) {
                node5 = ref4[m];
                q_line.append(this.create_highlighting_box(node5));
                q_line.append(this.create_highlighting_box(node3));
                q_line.append(this.create_highlighting_box(node1));
                f = document.createElement("div");
                f.innerHTML = " .";
                q_line.append(f);
                q_line.append(document.createElement('br'));
              }
            }
          }
        }
      }
      sparql_text.append(q_line);
      f_string = document.createElement('div');
      f_string.innerHTML = '}';
      return sparql_text.append(f_string);
    };

    PainlessGraph.prototype.add_role = function(role_name) {
      var attr_id, dom_id, parent, range_id, var_id;
      parent = this.cy.nodes(":selected");
      range_id = parent.id() + Math.round(Math.random() * 1000);
      attr_id = role_name;
      dom_id = parent.id() + range_id + "d";
      var_id = String.fromCharCode(this.cur_char_code).toLowerCase();
      this.cur_char_code += 1;
      this.cy.add({
        group: 'nodes',
        data: {
          id: range_id
        },
        classes: 'node-range'
      });
      this.cy.add({
        group: 'edges',
        data: {
          source: parent.id(),
          target: range_id
        }
      });
      this.cy.add({
        group: 'nodes',
        data: {
          id: attr_id
        },
        classes: 'node-attribute'
      });
      this.cy.add({
        group: 'edges',
        data: {
          source: range_id,
          target: attr_id
        }
      });
      this.cy.add({
        group: 'nodes',
        data: {
          id: dom_id
        },
        classes: 'node-domain'
      });
      this.cy.add({
        group: 'edges',
        data: {
          source: attr_id,
          target: dom_id
        }
      });
      this.cy.add({
        group: 'nodes',
        data: {
          id: var_id
        },
        classes: 'node-variable'
      });
      this.cy.add({
        group: 'edges',
        data: {
          source: dom_id,
          target: var_id
        }
      });
      this.update_sparql_text();
      return this.reshape();
    };

    PainlessGraph.prototype.init = function() {
      this.cy = new cytoscape({
        container: document.getElementById("query_canvas"),
        style: generate_style()
      });
      this.cy.add({
        group: 'nodes',
        data: {
          id: 'a'
        },
        classes: 'node-variable'
      });
      this.cy.on('click', '.node-variable', (function(_this) {
        return function(event) {
          event.target.select();
          return _this.reshape();
        };
      })(this));
      return this.cy.resize();
    };

    return PainlessGraph;

  })();

  window.PainlessSparql = (function() {
    function PainlessSparql(graph) {
      this.onkeypress_handler = bind(this.onkeypress_handler, this);
      this.create_sidenav = bind(this.create_sidenav, this);
      this.graph = graph;
      this.cy = graph.cy;
      this.init();
    }

    PainlessSparql.prototype.init = function() {
      this.create_sidenav();
      return this.add_event_listener();
    };

    PainlessSparql.prototype.create_sidenav = function() {
      var side_nav, sparql_textbox;
      side_nav = document.createElement("div");
      side_nav.id = "sidenav";
      side_nav.className = "sidenav";
      document.body.appendChild(side_nav);
      sparql_textbox = document.createElement("div");
      sparql_textbox.id = "sparql_textbox";
      sparql_textbox.innerHTML = "sparql_query_here";
      side_nav.appendChild(sparql_textbox);
      this.query_canvas = document.createElement("div");
      this.query_canvas.id = "query_canvas";
      side_nav.appendChild(this.query_canvas);
      return this.painless_graph = new PainlessGraph(this.query_canvas);
    };

    PainlessSparql.prototype.open_nav = function() {
      return document.getElementById("sidenav").style.width = "500px";
    };

    PainlessSparql.prototype.close_nav = function() {
      return document.getElementById("sidenav").style.width = "0px";
    };

    PainlessSparql.prototype.add_selected_node_to_sidenav = function() {
      var new_node_div, side_nav;
      side_nav = document.getElementById("sidenav");
      new_node_div = document.createElement("div");
      new_node_div.innerHTML = this.cy.$(":selected").data("label");
      return side_nav.append(new_node_div);
    };

    PainlessSparql.prototype.onkeypress_handler = function(event) {
      if (event.key === "a") {
        return this.open_nav();
      } else if (event.key === "b") {
        return this.close_nav();
      } else if (event.key === "c") {
        return this.painless_graph.add_role(this.cy.nodes(":selected").data('label'));
      }
    };

    PainlessSparql.prototype.add_event_listener = function() {
      return document.onkeypress = this.onkeypress_handler;
    };

    return PainlessSparql;

  })();

}).call(this);
